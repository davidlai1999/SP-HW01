#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <cstring>
#include <cctype>
#include <algorithm>

using namespace std ;

struct Data {
	string token ;
	int count ;
	bool exist ; 
};

int test( char ch ) ;
bool testNumber( string str ) ;
int sumOfASCII( string str ) ;
bool hasCloseBracket( string str, int no ) ;
bool has39( string str, int no ) ;

class DataList {
	std :: vector<Data> Table [4] ;
	std :: vector<Data> DataList [4] ;
	Data Table5[100] ;
	Data Table6[100] ;
	Data Table7[100] ;
	
	public :
		void readTable() {
			string file, str ;
			int dataNo = 1 ;
			char cStr[256] ;
			FILE *tablefile ;
			tablefile = fopen( "Table1.table", "r" ) ;
			while ( fscanf( tablefile, "%s", cStr ) != EOF ) {
				Data temp ;
   				string buf ;
   				buf.assign( cStr ) ;
    			temp.token = buf ;
    			temp.count = dataNo ;
    			Table[0].push_back( temp ) ;
    			dataNo++ ;
    		} // while
    		fclose(tablefile) ;
    		
    		dataNo = 1 ;
			tablefile = fopen( "Table2.table", "r" ) ;
			while ( fscanf( tablefile, "%s", cStr ) != EOF ) {
				Data temp ;
   				string buf ;
   				buf.assign( cStr ) ;
    			temp.token = buf ;
    			temp.count = dataNo ;
    			Table[1].push_back( temp ) ;
    			dataNo++ ;
    		} // while
    		fclose(tablefile) ;
    		
    		dataNo = 1 ;
			tablefile = fopen( "Table3.table", "r" ) ;
			while ( fscanf( tablefile, "%s", cStr ) != EOF ) {
				Data temp ;
   				string buf ;
   				buf.assign( cStr ) ;
    			temp.token = buf ;
    			temp.count = dataNo ;
    			Table[2].push_back( temp ) ;
    			dataNo++ ;
    		} // while
    		fclose(tablefile) ;
    		
    		dataNo = 1 ;
			tablefile = fopen( "Table4.table", "r" ) ;
			while ( fscanf( tablefile, "%s", cStr ) != EOF ) {
				Data temp ;
   				string buf ;
   				buf.assign( cStr ) ;
    			temp.token = buf ;
    			temp.count = dataNo ;
    			Table[3].push_back( temp ) ;
    			dataNo++ ;
    		} // while
    		fclose(tablefile) ;   		
		} // readTable()
			
		int tableTest( string str ) {		
			for ( int i = 0 ; i < 3 ; i++ ) {
				for ( int j = 0 ; j < Table[i].size() ; j++ ) {
					if ( str == Table[i][j].token ) {
						return i ;
					} // if
				} // for
			} // for
			
			return 7 ;
		} // tableTest()
		
		int findCount( string str ) {
			int count = 0 ;
			for ( int i = 0 ; i < 4 ; i++ ) {
				for ( int j = 0 ; j < Table[i].size() ; j++ ) {
					if ( Table[i][j].token == str ) {
						count = Table[i][j].count ;
						return count ;
					}
				} // for
			} // for
		} // findCount()
		
		void resetTable567() {
			for ( int i = 0 ; i < 100 ; i++ ) {
				Table5[i].exist = false ;
				Table5[i].count = i + 1 ;
			} // for
			for ( int i = 0 ; i < 100 ; i++ ) {
				Table6[i].exist = false ;
				Table6[i].count = i + 1 ;
			} // for
			for ( int i = 0 ; i < 100 ; i++ ) {
				Table7[i].exist = false ;
				Table7[i].count = i + 1 ;
			} // for
		} // resetTable567()
		
		void setTable5( int &address, string str ) {
			int time = 0 ;
			bool same = false ;
			while ( Table5[address].exist == true ) {
				time++ ;
				if ( Table5[address].token == str ) {
					same = true ;
					break ;
				} // if
				if ( time == 100 ) {
					cout << "The table is full" << endl ;
					same = true ;
					address = -1 ;
					break ;					
				}	
				address++ ;
				if ( address == 100 )
					address = 0 ;
			} // while
			if ( same != true ) {
				Table5[address].token = str ;
				Table5[address].exist = true ;
			} // if
		} // setTable5() 

		void setTable6( int &address, string str ) {
			int time = 0 ;
			bool same = false ;
			while ( Table6[address].exist == true ) {
				time++ ;
				if ( Table6[address].token == str ) {
					same = true ;
					break ;
				} // if
				if ( time == 100 ) {
					cout << "The table is full" << endl ;
					same = true ;
					
					break ;					
				}	
				address++ ;
				if ( address == 100 )
					address = 0 ;
			} // while
			if ( same != true ) {
				Table6[address].token = str ;
				Table6[address].exist = true ;
			} // if
		} // setTable6() 
		
		void setTable7( int &address, string str ) {
			int time = 0 ;
			bool same = false ;
			while ( Table7[address].exist == true ) {
				time++ ;
				if ( Table7[address].token == str ) {
					same = true ;
					break ;
				} // if
				if ( time == 100 ) {
					cout << "The table is full" << endl ;
					same = true ;
					address = -1 ;
					break ;					
				}	
				address++ ;
				if ( address == 100 )
					address = 0 ;
			} // while
			if ( same != true ) {
				Table7[address].token = str ;
				Table7[address].exist = true ;
			} // if
		} // setTable7() 
			
		void readInput() {
			string file, outputfile, low_cut, high_cut ;
			fstream infile ;
			FILE * outfile ;
			int i = 0, pre, pos ;
			int pre_mod = 0 , pos_mod = 0, address = 0 ;
			int count, time = 0 ;
			char cStr[256] ;
			
			cout << "請輸入檔案名稱："; 
			cin >> file;
			outputfile = file + "output.txt" ;
  			file = file + "input.txt" ; 
  			infile.open( file.c_str(), fstream::in ) ;
  			outfile = fopen( outputfile.c_str(), "w+t" ) ; 
  			
			while( !infile.is_open() ) {
				cout << "檔案名稱錯誤,重新輸入：" ;
    			cin >> file;
    			outputfile = file + "output.txt" ;
	 			file = file + "input.txt" ; 
    			infile.open( file.c_str(), fstream::in ) ;
    			outfile = fopen( outputfile.c_str(), "w+t" ) ; 
			} //while
			
			while ( infile.getline( cStr, 256 ) ) {
				
				Data temp ;
   				string buf, cut ;
   				buf.assign( cStr ) ;
   				fprintf( outfile, "%s\n", cStr ) ;
   				while ( i < buf.length() ) {
   					while ( buf[i] == ' ' || buf[i] == '\t' ) 
   						i++ ;
   					if ( i >= buf.size() )
   						break ;

					pre = i ;
					pre_mod = test( buf[i] ) ;
					if ( buf[i] == '(' && hasCloseBracket( buf, i+1 ) == true ) { // (.) 
						i = buf.length() ;
					} // if
					else if ( test( buf[i] ) == 3 ) { // 標點符號 
						pos = i + 1 ;
						cut = buf.substr( pre, pos-pre ) ;
						temp.token = cut ;
    					DataList[3].push_back( temp ) ;
    					count = findCount( cut ) ;
    					fprintf( outfile, "( 4, %d )", count ) ;
    					if ( buf[i] == '.' )
    						i = buf.length() ;
    					i++ ;
					} // else if
					else if ( ( buf[i] == 'C' || buf[i] == 'c' ) && buf[i+1] == 39 && has39( buf, i+2 ) == true ) { // C' '
						i++ ;
						pre = i ;
						pos = i + 1 ;
						cut = buf.substr( pre, pos-pre ) ;
						temp.token = cut ;
    					DataList[3].push_back( temp ) ;
    					fprintf( outfile, "( 4, 9 )" ) ;
    					
						pre = i + 1 ;
						i++ ;
						while ( buf[i] != 39 ) {
							i++ ;
						} // while
						pos = i ;
						cut = buf.substr( pre, pos-pre ) ;
						temp.token = cut ;	
						address = sumOfASCII( cut ) % 100  ; 
    					setTable7( address, cut ) ;			
    					fprintf( outfile, "( 7, %d )", address ) ;
    					
						pre = i ;
						i++ ;	
						pos = i ;
						cut = buf.substr( pre, pos-pre ) ;
						temp.token = cut ;
    					DataList[3].push_back( temp ) ;
						fprintf( outfile, "( 4, 9 )" ) ;										
					} // else if
					else if ( ( buf[i] == 'X' || buf[i] == 'x' ) && buf[i+1] == 39 && has39( buf, i+2 ) == true ) { // X' '
						i++ ;
						pre = i ;
						pos = i + 1 ;
						cut = buf.substr( pre, pos-pre ) ;
						temp.token = cut ;
    					DataList[3].push_back( temp ) ;
    					fprintf( outfile, "( 4, 9 )" ) ;
    					
						pre = i + 1 ;
						i++ ;
						while ( buf[i] != 39 ) {
							i++ ;
						} // while
						pos = i ;
						cut = buf.substr( pre, pos-pre ) ;
						temp.token = cut ;				
						setTable6( address, cut ) ;			
    					fprintf( outfile, "( 6, %d )", address ) ;
    					
						pre = i ;
						i++ ;	
						pos = i ;
						cut = buf.substr( pre, pos-pre ) ;
						temp.token = cut ;
    					DataList[3].push_back( temp ) ;
						fprintf( outfile, "( 4, 9 )" ) ;										
					} // else if
					else {
						i++ ;
						pos_mod = test( buf[i] ) ;
						while ( i < buf.length() && buf[i] != ' ' && pos_mod == pre_mod ) {
							i++ ;
							pos_mod = test( buf[i] ) ;
						} // while
						
						pos = i ;
    						if ( pos >= pre ) {
    							cut = buf.substr( pre, pos-pre ) ;
    							low_cut.resize( cut.size() ) ;
    							high_cut.resize( cut.size() ) ;
    							std::transform( cut.begin(), cut.end(), low_cut.begin(), :: tolower ) ;
    							std::transform( cut.begin(), cut.end(), high_cut.begin(), :: toupper ) ;
    							temp.token = cut ;
    							if ( tableTest( low_cut ) == 0 ) {
    								DataList[0].push_back( temp ) ;
    								count = findCount( low_cut ) ;
    								fprintf( outfile, "( 1, %d )", count ) ;
    							}
    							else if ( tableTest( high_cut ) == 1 ) {
    								DataList[1].push_back( temp ) ;
    								count = findCount( high_cut ) ;
    								fprintf( outfile, "( 2, %d )", count ) ;
    							}
    							else if ( tableTest( high_cut ) == 2 ) {
    								DataList[2].push_back( temp ) ;
								count = findCount( high_cut ) ;
    								fprintf( outfile, "( 3, %d )", count ) ;
							}
    							else {
    								if ( testNumber( cut ) == true ) {
    									time++ ;
    									address = sumOfASCII( cut ) % 100 ; 
    									setTable6( address, cut ) ;
    									fprintf( outfile, "( 6, %d )", address ) ;
								} // if
								else {
									address = sumOfASCII( cut ) % 100  ; 
    									setTable5( address, cut ) ;
    									fprintf( outfile, "( 5, %d )", address ) ;
								} // else
							} // else
    						} // if 
    					} //else
    				} // while
    				i = 0 ;
    				fprintf( outfile, "\n" ) ; 
			} // while

			infile.close() ;
			fclose(outfile) ;
		} // ReadInput
		
		void showTable() {
				for ( int j = 0 ; j < 100 ; j++ ) {
					cout << Table5[j].count << "," << Table5[j].token << endl ;	
		}
		
		void show() {					
			for ( int i = 0 ; i < 4 ; i++ )	{
				for ( int j = 0 ; j < DataList[i].size() ; j++ ) {
					cout << "table" << i+1 << endl ;
					cout << DataList[i][j].token << endl ;
				} //for
			} // for
		} // show()		
};


int main () {
	string fileName ;
	DataList datalist ;
	datalist.readTable() ;
	datalist.resetTable567() ;
	datalist.readInput() ;
	datalist.showTable() ;
	//datalist.show() ;
} // main

int test( char ch ) {
	if ( ( ch >= 48 && ch <=57 ) || ( ch >= 65 && ch <= 90 ) || ( ch >= 97 && ch <= 122 ) )
		return 1 ;
	else if ( ( ch >= 42 && ch <= 47 ) || ch == 58 || ch == 59 || ch == 61 || ch == 63 || ch == 35 || ch == 39 || ch == 64 ) 
		return 3 ;
	else 
		return 4 ;
} // test()

bool testNumber( string str ) {
	bool test = true ;
	for ( int i = 0 ; i < str.size() ; i++ ) {
		if ( str[i] < 48 || str[i] > 57 ) {
			test = false ;
			return test ;
		} // if
	} // for
	
	return test ;
} // testNumber()

bool hasCloseBracket( string str, int no ) {
	bool test = false ;
	for ( int i = no ; i < str.size() ; i++ ) {
		if ( str[i] == ')' ) 
			return true ;
	} // for
	return false ;
} // hasCloseBracket()

bool has39( string str, int no ) {
	bool test = false ;
	for ( int i = no ; i < str.size() ; i++ ) {
		if ( str[i] == 39 ) 
			return true ;
	} // for
	return false ;
} // has39()

int sumOfASCII( string str ) {
	int ans = 0 ;
	for ( int i = 0 ; i < str.length() ; i++ ) {
		ans = ans + str[i] ;
	} // for
	
	return ans ;
} // suOfASCII
